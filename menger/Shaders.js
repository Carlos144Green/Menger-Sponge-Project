"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.floorFSText = exports.floorVSText = exports.defaultFSText = exports.defaultVSText = void 0;
exports.defaultVSText = "\n    precision mediump float;\n\n    attribute vec3 vertPosition;\n    attribute vec3 vertColor;\n    attribute vec4 aNorm;\n    \n    varying vec4 lightDir;\n    varying vec4 normal;   \n \n    uniform vec4 lightPosition;\n    uniform mat4 mWorld;\n    uniform mat4 mView;\n\tuniform mat4 mProj;\n\n    void main () {\n\t\t//  Convert vertex to camera coordinates and the NDC\n        gl_Position = mProj * mView * mWorld * vec4 (vertPosition, 1.0);\n        \n        //  Compute light direction (world coordinates)\n        lightDir = lightPosition - vec4(vertPosition, 1.0);\n\t\t\n        //  Pass along the vertex normal (world coordinates)\n        normal = aNorm;\n    }\n";
// TODO: Write the fragment shader
exports.defaultFSText = "\n    precision mediump float;\n\n    varying vec4 lightDir;\n    varying vec4 normal;    \n\t\n    \n    void main () {\n        vec4 newNormal = normal;\n        if ((abs(normal)).x == 1.0) {\n            newNormal.x = - normal.x;\n        }\n        if ((abs(normal)).z == 1.0) {\n            newNormal.z = - normal.z;\n        }\n        gl_FragColor = dot(normalize(newNormal), normalize(lightDir)) * normalize(abs(normal));\n        gl_FragColor[3] = 1.0; \n    }\n";
// TODO: floor shaders
exports.floorVSText = "\n    precision mediump float;\n    attribute vec3 vertPosition;\n    attribute vec3 vertColor;\n    attribute vec4 aNorm;\n    varying vec4 lightDir;\n    varying vec4 normal;\n    varying vec3 vertPos;\n    uniform vec4 lightPosition;\n    uniform mat4 mWorld;\n    uniform mat4 mView;\n    uniform mat4 mProj;\n    void main () {\n        //  Convert vertex to camera coordinates and the NDC\n        vec4 vertVec = vec4(vertPosition, 1.0);\n        gl_Position = mProj * mView * mWorld * vertVec;\n        \n        //  Compute light direction (world coordinates)\n        lightDir = lightPosition - vertVec;\n        \n        //  Pass along the vertex normal (world coordinates)\n        normal = aNorm;\n        vertPos = vertPosition;\n    }\n";
exports.floorFSText = "\n    precision mediump float;\n    varying vec4 lightDir;\n    varying vec4 normal;\n    varying vec3 vertPos;\n    void main () {\n        vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n        float floorSize = 1.0 / 5.0;\n        if (mod(floor(vertPos.x * floorSize) + floor(vertPos.z * floorSize), 2.0) < 0.5) { \n            color = vec4(0.0, 0.0, 0.0, 1.0); \n        }\n        gl_FragColor = max(min(dot(normalize(normal), normalize(lightDir)), 1.0), 0.0) * color;\n        gl_FragColor[3] = 1.0;\n    }\n";
//# sourceMappingURL=Shaders.js.map